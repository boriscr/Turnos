<?php

namespace App\Providers;

use Illuminate\Support\ServiceProvider;
use Illuminate\Console\Scheduling\Schedule;
use App\Jobs\ArchiveOldAppointments;
use App\Jobs\VerificarStatusJob;
use Illuminate\Support\Facades\Log;

class ScheduleServiceProvider extends ServiceProvider
{
    public function register(): void
    {
        //
    }

    public function boot(Schedule $schedule): void
    {
        // ==================== ðŸŽ¯ CONFIGURACIÃ“N DESARROLLO ====================
        if (app()->environment('local', 'development')) {
            Log::info('Configurando scheduler para DESARROLLO');
            
            // âœ… DESARROLLO: Call directo cada minuto (rÃ¡pido para testing)
            $schedule->call(function () {
                Log::info('ðŸ”§ [DEV] Ejecutando verificaciÃ³n automÃ¡tica');
                $controller = new \App\Http\Controllers\ReservationController();
                $result = $controller->checkStatusAutomatically();
                Log::info("ðŸ”§ [DEV] VerificaciÃ³n completada: {$result['reservas_actualizadas']} reservas actualizadas");
            })->everyMinute()->name('verificar-status-dev');
        }
        
        // ==================== ðŸš€ CONFIGURACIÃ“N PRODUCCIÃ“N ====================
        else {
            Log::info('Configurando scheduler para PRODUCCIÃ“N');
            
            // âœ… PRODUCCIÃ“N: Job optimizado una vez al dÃ­a
            $schedule->job(new VerificarStatusJob())
                ->dailyAt('02:00') // 2:00 AM - horario de baja demanda
                ->name('verificar-status-prod')
                ->withoutOverlapping(30); // Evitar superposiciÃ³n (30 minutos)
        }

        // ==================== ðŸ“¦ ARCHIVADO (AMBOS ENTORNOS) ====================
        $schedule->job(new ArchiveOldAppointments())
            ->monthlyOn(1, '03:00') // 3:00 AM del dÃ­a 1 de cada mes
            ->name('archive-appointments-job');
    }
}